<?php
$this->layout()->active = 'about';
$this->render('page-controller/about/sidebar');
$headTitle = $this->headTitle();
$headTitle->prepend('About');
$headTitle->prepend('FAQ ZFv1');
?>
<section class="about">
    <h1>FAQ ZFv1</h1>

    <blockquote>
        Frequently Asked Questions About ZF1
    </blockquote>

    <hr/>

    <dl>
        <dt>What is the difference between Zend_Auth and Zend_Acl?</dt>
        <dd>
            <p>
                <tt>Zend_Auth</tt> is used for authenticating users with a variety of authentication methods, including LDAP, OpenID, and HTTP. Authentication is the process of verifying that the provided credentials are valid for the system. By authenticating to your system, your users can prove that they are who they say they are. For more information on Zend Framework's authentication implementation, <a href="http://framework.zend.com/manual/en/zend.auth.html">see the <tt>Zend_Auth</tt> documentation</a>.
            </p>

            <p>
                <tt>Zend_Acl</tt> is an implementation of Access Control List (ACL) authorization. Generally speaking, ACLs are lists of roles that are authorized to perform a particular operation on specific resources in your system. <tt>Zend_Acl</tt> can support advanced rule definitions with features such as multiple inheritance for roles and assertions for conditional rules. For more information on <tt>Zend_Acl</tt>, <a href="http://framework.zend.com/manual/en/zend.acl.html">see the <tt>Zend_Acl</tt> documentation</a>.
            </p>

            <p>
                <tt>Zend_Auth</tt> and <tt>Zend_Acl</tt> can be used together to build very sophisticated security systems: first the user confirms their identity with <tt>Zend_Auth</tt>, then this identity is used to assign one or more <tt>Zend_Acl</tt> roles to the user for authorization to use or modify resources in the system.
            </p>

        <dt>What do I have to do to contribute to Zend Framework?</dt>
        <dd>
            <p>
                The only requirement for contributing to Zend Framework is submitting our either our <a href="http://framework.zend.com/cla">individual Contributors License Agreement</a> (CLA) or our <a href="http://framework.zend.com/ccla">corporate CLA</a>. Once you have signed the CLA, you can visit our <a href="http://framework.zend.com/wiki/display/ZFDEV/Home" title="Home">contributors wiki</a> to get started.
            </p>

            <p>
                We strongly recommend you read and understand the terms of our New BSD License-style <a href="http://framework.zend.com/license">license</a>, under which all parts of Zend Framework are licensed, all contributions inclusive.
            </p>
        </dd>

        <dt>What is this "username" I have to submit with my CLA, and why do I have to submit it?</dt>
        <dd>
            <p>
                This is the username you use to access the <a href="http://framework.zend.com/issues">issue tracker</a>, <a href="http://framework.zend.com/wiki">wiki</a>, <a href="http://framework.zend.com/code">code browser</a>, etc. If you don't have a username yet, you can sign up <a href="http://framework.zend.com/issues/secure/Signup!default.jspa">here</a>.
                When we process your CLA, we need to grant the appropriate privileges to your user. To do this, we need to know your username.
            </p>
        </dd>

        <dt>Should I sign an <a href="http://framework.zend.com/cla">individual CLA</a> or a <a href="http://framework.zend.com/ccla">corporate CLA</a>?</dt>

        <dd>
            <p>
                If you are contributing code as an individual- and not as part of your job at a company- you should sign the <a href="http://framework.zend.com/cla">individual CLA</a>. If you are contributing code as part of your responsibilities as an employee at a company, you should submit a <a href="http://framework.zend.com/ccla">corporate CLA</a> with the names of all co-workers that you foresee contributing to the project.
            </p>
        </dd>

        <dt>What should I know about the Zend Framework CLA before submitting it?</dt>
        <dd>
            <p>
                By signing a CLA, the person contributing source code provides a copyright
                license to Zend to use the source code he or she submitted to the Zend Framework project. By
                doing so, the contributor does not give up his or her own rights or copyright to his or her
                own code, but provides us with a copyright license. In addition, the purpose of
                the CLA is to clearly define the terms under which intellectual property has
                been contributed to Zend Framework and to make sure that, to the best of the
                contributor's knowledge, he or she is entitled to make such contribution and is not
                violating anyone else's intellectual property.
            </p>
        </dd>

        <dt>Why does the Zend Framework project have a CLA at all?</dt>
        <dd>
            <p>
                The CLA protects all
                users including individuals, small and medium businesses, and large corporations. By having a CLA in
                place, we mitigate the risk that companies who claim intellectual property
                infringement may demand royalties or fees from users of Zend Framework,
                whether individuals or companies. This is especially important for companies
                basing their business or products on Zend Framework. The Zend Framework CLA
                helps to ensure that code and other IP in Zend Framework remains free.
            </p>

        <dt>I am a minor (under 18 years of age). Who should sign my CLA?</dt>
        <dd>
            <p>
                CLA's for contributors under the age of 18 should be signed
                by both the contributor and the contributor's legal guardian.
            </p>
        </dd>

        <dt>What kind of contribution requires that I submit a CLA? And what kind of contribution can I make without submitting a CLA?</dt>
        <dd>
            <p>
                You must sign a CLA before Zend Framework can accept any content that
                constitutes intellectual property. This includes anything that could carry a
                copyright or be patented. This includes code, patches, tests, documentation, and even proposals submitted on our<a href="http://framework.zend.com/wiki/display/ZFPROP/Home" title="Home">wiki</a>. You do not need to submit a CLA to report a bug or make a feature request in our <a href="http://framework.zend.com/issues">issue tracker</a>, or
                to ask a question on the <a href="http://framework.zend.com/wiki/display/ZFDEV/Mailing+Lists" title="Mailing Lists">mailing lists</a>. You can include code in emails to the mailing lists to illustrate your words, but your code cannot
                be incorporated into Zend Framework unless it is submitted under the terms of
                the CLA.
            </p>
        </dd>

        <dt>I've submitted the CLA, now how can I get started contributing to Zend Framework?</dt>
        <dd>
            <p>There are lots of ways to contribute to Zend Framework. Many major features are contributed to ZF through our <a href="http://framework.zend.com/wiki/display/ZFPROP/Home" title="Home">proposal process</a>. Most code contributors also commit bug fixes and tests. Another valuable form of contribution is manual translation and other forms of documentation. Contributors may also invest their time in updating the <a href="http://framework.zend.com/wiki">wiki</a> or adding, commenting on, and voting on issues in our <a href="http://framework.zend.com/issues">issue tracker</a>. No matter how you plan to contribute, the best place to get started is our <a href="http://framework.zend.com/wiki/display/ZFDEV/Contributing+to+Zend+Framework" title="Contributing to Zend Framework">contributor guide</a>.
            </p>
        </dd>


        <dt>Where is Zend Framework's ORM implementation?</dt>

        <dd>
            <p>
                Object Relational Maps (ORMs) are practically frameworks on their own, and consist of data access, repositories, identity maps, and many more components. We feel it makes sense to let ORM experts write such software, and allow integrating these solutions in Zend Framework. Popular projects include Doctrine and Propel.
            </p>
        </dd>

        <dt>I want to use a SQL function or perform calculations in a statement I'm generating with Zend_Db_Select. How can I do this?</dt>

        <dd>

            <p>
                Actually, by default, if your expression includes parentheses, <tt>Zend_Db_Select</tt> will cast the statement appopriately. However, if it does not, or you are having problems, you can use <tt>Zend_Db_Expr</tt> to explicitly create the expression:
            </p>

            <code>
/* Build the SQL:
 * SELECT p."product_id", p.cost * 1.08 AS cost_plus_tax
 * FROM "products" AS p
 */
$select = $db-&gt;select()
    -&gt;from(array('p' =&gt; 'products'),
    array(
        'product_id',
        'cost_plus_tax' =&gt; new Zend_Db_Expr('p.cost * 1.08'),
    ));
</code>

        <dt>How can I customize the appearance of forms generated by <tt>Zend_Form</tt>?</dt>

        <dd>
            <p>
                You're probably looking for <a href="http://devzone.zend.com/article/3450-Decorators-with-Zend_Form">decorators</a>. All forms and form elements in Zend_Form use decorators to render their output.
            </p>
        </dd>

        <dt>How can I add extra HTML (such as a link) to my form element?</dt>
        <dd>

            <p>
                This can easily be done using decorators. For instance using the Description decorator. It is important to note though that you will need to turn off escaping for the output of the decorator:</p>

            <code>
$element-&gt;setDecorators(array(
    array('ViewHelper'),
    array('Description', array('escape', false)),
    array('Errors'),
    array('HtmlTag', array('tag' =&gt; 'dd')),
    array('Label', array('tag' =&gt; 'dt')),
));</code>

            <p>Now, you can use the following to add extra HTML to the element:</p>

            <code>
$element-&gt;setDescription(
    '&lt;strong&gt;This contains HTML that will actually be parsed by the browser, not escaped&lt;/strong&gt;'
);</code>

        </dd>

        <dt>Why can't <tt>Zend_Form</tt> render my <tt>File</tt> element without errors?</dt>

        <dd>
            <p>
                The file element needs a special file decorator, which is added by default. When you set your own decorators for file elements, you delete the default decorators. For example:</p>

            <code>
$element-&gt;setDecorators(array(
    array('ViewHelper'),
    array('Errors')
));</code>

            <p>
                You should use a <tt>File</tt> decorator instead of the <tt>ViewHelper</tt> for the file element, like so:
            </p>

            <code>
$element-&gt;setDecorators(array(
    array('File'),
    array('Errors')
));</code>

        </dd>

        <dt>How can I detect if an optional file has been uploaded?</dt>
        <dd>

            <p>The <tt>receive()</tt> method will return <tt>true</tt> for file elements that are not required. The reason is that you said "the file can be omitted, and that's ok for me". The <tt>receive()</tt> method will return false only in the event of a failure.</p>

            <p>Still there are several ways to detect if a file has been uploaded or not:</p>

            <ul><li>Use isUploaded which returns a boolean</li>
                <li>Use getFileName which returns null in this case (note that you must use the latest release for this behaviour)</li>
                <li>Use getFileInfo which will have an empty 'file' key and the flag 'isUploaded' set to false
                </li></ul>

        </dd>

        <dt>Which version of PHP does Zend Framework require?</dt>

        <dd>

            <p>Zend Framework requires PHP 5.2.4 and up. Some Zend Framework components may work with earlier versions of PHP, but these components are tested and supported only on 5.2.4 and up. See the <a href="http://framework.zend.com/manual/en/requirements.html">requirements appendix</a> for more information.</p>

        </dd>

        <dt>Does Zend Framework support PHP 4?</dt>

        <dd>
            <p>No. Zend Framework was built to use all of the sophisticated object oriented features of PHP 5 and take advantage of significant performance and security enhancements.</p>

            <p>Another consideration was support of the platform ZF would be running on. The PHP community officially discontinued support for PHP 4 as of 2008-01-01, and no critical security updates will be published for PHP 4 after 2008-08-08.</p>

            <p>These factors, among others, convinced us that PHP 5 was the best platform for Zend Framework and applications built on ZF.</p>
        </dd>


        <dt>>Where is the model in ZF's MVC implementation?</dt>

        <dd>
            <p>The model component can vary dramatically in responsibilities and data store from one MVC application to the next. The ZF community has not defined a model interface, class, or other formalism simply because we wanted to avoid introducing limitations without significant added value.</p>

        </dd>

        <dt>Is ZF a component library or a framework?</dt>

        <dd>

            <p>Simple answer: both. Zend Framework provides all the components required for most web applications in a single distribution. But Zend Framework components are also loosely coupled, making it easy to use just a few components in a web application- even alongside other frameworks! Using this use-at-will architecture, we are implementing features commonly found in more monolithic frameworks. In fact, we are currently working on a tooling component for the 1.8 release that will make it simpler to build applications using ZF components, yet will not sacrifice the use-at-will nature of existing ZF components. It's a testament to the use-at-will architecture of Zend Framework that the tooling component itself can be used standalone.</p>

        </dd>

        <dt>How can I make all i18n-aware components aware of my Zend_Translate object?</dt>

        <dd>
            <p>A variety of components are translation aware (i.e., accept <tt>Zend_Translate</tt> objects), including:</p>

            <ul><li>Zend_View_Helper_Translate</li>
                <li>Zend_Validate_*</li>
                <li>Zend_Form</li>
            </ul>

            <p>To have them all use the same <tt>Zend_Translate</tt> instance, simply place it in the registry with the key "Zend_Translate":</p>


            <code>
Zend_Registry::set('Zend_Translate', $translate);
</code>

        </dd>

        <dt>How can I use the same locale everywhere?</dt>

        <dd>

            <p>With ZF 1.7 an application wide locale is supported. You can do the following in your bootstrap file:</p>

            <code>
$locale = new Zend_Locale('en');
Zend_Registry::set('Zend_Locale', $locale);
</code>


            <p>From now on, all locale aware components will use your locale object stored in the registry as long as you don't give another one manually.</p>

        </dd>

        <dt>Why are my dates formatted wrong? Why do I get the false year value?</dt>

        <dd>

            <p>When using own formats in your code you could come to a situation where you get for example 29.12.2009, but you expected to get 29.12.2008.</p>

            <p>There is one year difference: 2009 instead of 2008. You should use the lower cased year constant. See this example:</p>

            <code>
$date-&gt;toString('dd.MM.yyyy');
</code>

            <p>Note the lower cased "y" which makes the difference and outputs the real year.</p>

        </dd>

        <dt>How can I debug Zend_Date in a simple way?</dt>
        <dd>
            <p>
                When you think that you are getting wrong output from Zend_Date then it's often needed to see what Zend_Date really uses internally.
            </p>

            <p>
                Well.. a var_dump of Zend_Date is not really helpfull, but you could simply use getIso(). This format has all date informations available:
            </p>

            <code>
$date-&gt;getIso(); // could return '2009-10-21T15:00:02+01:00'
</code>

            <p>
                Note that using toString() and outputting only parts of a date does not show all needed informations. There could be a wrong used timezone, or a DST change which is suppressed by toString() but shown with getIso().
            </p>


        <dt>Where's the model?</dt>

        <dd>
            <p>Unlike the view and the controller components, the model component can vary dramatically in responsibilities and data storage from one MVC application to the next. It should represent what your application does in the abstract. The Zend Framework community has not defined a model interface, class, or other formalism because we haven't identified enough added value to justify limitations on what constitutes a model.</p>

        </dd>

        <dt>How can I retrieve the view object within a plugin or arbitrary code?</dt>

        <dd>
            <p>
                ZF uses an action helper called the ViewRenderer by default. This action helper instantiates and stores a Zend_View object, which is subsequently injected into other objects. The view object is stored in the ViewRenderer's view property. You can get the ViewRenderer instance, and thereby the view instance, with the Action Helper broker:
            </p>

            <code>
$viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer';
$view = $viewRenderer-&gt;view;
</code>


            <p>However, if you're accessing the view early in the dispatch process- before an action is actually dispatched, for example- then you may need to initialize the view first:</p>

            <div class="code">
                <code>
if (!isset($viewRenderer-&gt;view)) {
    $viewRenderer-&gt;initView();
}
$view = $viewRenderer-&gt;view;
</code>

            <p>
                If you are using and have already initialized Zend_Layout, you can access the view object much more succinctly:
            </p>

            <code>
$view = Zend_Layout::getMvcInstance()-&gt;getView();
</code>

            <p>This proxies to the ViewRenderer and performs all of the steps above for you.</p>

        </dd>

        <dt>I'm using the ContextSwitch or AjaxContext view helper and receiving an exception indicating the error.ajax.phtml view script is missing; what am I doing wrong?"</dt>

        <dd>
            <p>
                ContextSwitch makes the assumptions that (a) you are not calling <tt>_forward()</tt> and (b) that your application code will not throw an exception. If you see the above error, your code is throwing an exception - but the context is still in play, and the ViewRenderer is simply trying to load a view script for the current context from the ErrorController.
            </p>

            <p>
                The easiest way to fix the situation is to have the <tt>ErrorController::errorAction()</tt> redefine the view script suffix, as follows:
            </p>

            <code>class ErrorController extends Zend_Controller_Action
{
    public function errorAction()
    {
        $this-&gt;_helper-&gt;viewRenderer-&gt;setViewSuffix('phtml');
        // ...
    }
}
</code>

        </dd>

        <dt>I'm using Apache, and passing urlencoded slashes via $_GET or as URL parameters – and I'm getting 404s!</dt>

        <dd>

            <p>
                Apache by default disallows urlencoded slashes (i.e., "%2F") in URL path parts or the query string. This feature can be disabled by enabling the "AllowEncodedSlashes" directive:
            </p>

            <code>AllowEncodedSlashes On</code>

            <p>However, this directive must be set at either a server-wide (httpd.conf) or virtual-host level.</p>

            <p>For more information, <a href="http://httpd.apache.org/docs/2.0/mod/core.html#allowencodedslashes">read the AllowEncodedSlashes documentation</a>.</p>

        </dd>

        <dt>What is Lucene?</dt>
        <dd>
            <p>
                <a href="http://lucene.apache.org/java/docs/index.html">Lucene</a> is a high-performance, full-featured text search engine that utilizes an open, binary format for storing search indexes and a standardized query format for querying against the indexes. Lucene was originally written in Java as part of the Apache project. <tt>Zend_Search_Lucene</tt> is a PHP implementation that provides full binary compatibility with Java Lucene.
            </p>
        </dd>

        <dt>Can I use <tt>Zend_Search_Lucene</tt> to search my Java Lucene-generated indexes?</dt>
        <dd>
            <p>
                Yes! In fact, the Zend Framework site uses <tt>Zend_Search_Lucene</tt> with indexes created by our Java developer tools to provide site-wide search.
            </p>
        </dd>

        <dt>Can I use tools such as <a href="http://www.getopt.org/luke/">Luke</a> with indexes generated by <tt>Zend_Search_Lucene</tt>?</dt>
        <dd>
            <p>Yes! We regularly use Luke to inspect our <tt>Zend_Search_Lucene</tt>-generated indexes for development and diagnosis purposes.</p>
        </dd>


        <dt>Why are client libraries for web services such as Akismet, Amazon, Audioscrobbler, Delicious, Flickr, Nirvanix, Simpy, StrikeIron, and Yahoo! part of the Zend Framework standard library?</dt>

        <dd>
            <p>
                Zend Framework has been designed to solve the most common problems in web application development. Web services are a big part of today's web development environment. So much so that many of our users consume our web service clients for services such as Amazon ECS, Akismet, and ReCaptcha before adopting more infrastructure-oriented components such as Zend_Registry and Zend_Log. Because these web services play such an important role in today's web applications, we consider them 'first-class citizens' in ZF.
            </p>
        </dd>

        <dt>I've tried sending an 'unsubscribe' mail to all ZF mailing lists, but I'm still getting messages from these lists. What do I have to do to stop getting these mails?</dt>
        <dd>
            <p>There is an 'fw-all' list that aggregates all other lists besides fw-announce, fw-general, fw-docs, and fw-svn. Please try sending an email to <a href="mailto:fw-all-subscribe@lists.zend.com">fw-all-subscribe@lists.zend.com</a> to make sure you're not subscribed to this list.
                Also, please ensure that you mail all unsubscribe requests from the account that you subscribed with. You may be receiving list traffic on a different account if you have set up a mail forward from the original subscription account.</p>

        <dt>Where can I reset my password?</dt>

        <dd>
            <p>
                <a href="http://framework.zend.com/crowd">http://framework.zend.com/crowd</a></p>
        </dd>

        <dt>What services are available from Zend Technologies for Zend Framework?</dt>
        <dd>
            <p>
                <a href="http://www.zend.com">Zend Technologies</a> provides a comprehensive set of services for Zend Framework, including:
            </p>

            <ul>
                <li><a href="http://www.zend.com/en/services/support/zend-framework-support">Support</a></li>
                <li><a href="http://www.zend.com/en/services/training/course-catalog/zend-framework">Training</a></li>
                <li><a href="http://www.zend.com/en/services/consulting">Consulting</a></li>
                <li><a href="http://www.zend.com/en/services/certification/framework/">Certification</a></li>
            </ul>

        </dd>
    </dl>

</section>